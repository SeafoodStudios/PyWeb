#Perplexity AI, 2025
import js
import random
from pyodide.ffi import create_proxy

# Clear the page and add a canvas element
js.document.body.innerHTML = ""
canvas = js.document.createElement("canvas")
canvas.width = 400
canvas.height = 600
js.document.body.appendChild(canvas)
ctx = canvas.getContext("2d")

class FlappyBirdGame:
    def __init__(self):
        self.bird_y = 300
        self.bird_velocity = 0
        self.gravity = 0.6
        self.lift = -10
        self.pipes = []
        self.pipe_width = 60
        self.pipe_gap = 150
        self.frame_count = 0
        self.score = 0
        self.game_over = False

    def update(self):
        if self.game_over:
            return
        self.frame_count += 1
        self.bird_velocity += self.gravity
        self.bird_y += self.bird_velocity

        # Add pipes every 90 frames
        if self.frame_count % 90 == 0:
            pipe_top = random.randint(50, 350)
            self.pipes.append({'x': 400, 'top': pipe_top})

        # Move pipes left
        for pipe in self.pipes:
            pipe['x'] -= 3

        # Remove offscreen pipes and update score
        if self.pipes and self.pipes[0]['x'] < -self.pipe_width:
            self.pipes.pop(0)
            self.score += 1

        # Collision detection
        for pipe in self.pipes:
            if 100 > pipe['x'] and 100 < pipe['x'] + self.pipe_width:
                if self.bird_y < pipe['top'] or self.bird_y > pipe['top'] + self.pipe_gap:
                    self.game_over = True

        # Check ground and ceiling
        if self.bird_y > 580 or self.bird_y < 0:
            self.game_over = True

    def flap(self):
        if not self.game_over:
            self.bird_velocity = self.lift

game = FlappyBirdGame()

def draw():
    # Clear background
    ctx.fillStyle = "#70c5ce"
    ctx.fillRect(0, 0, canvas.width, canvas.height)

    # Draw bird
    ctx.fillStyle = "yellow"
    ctx.beginPath()
    ctx.arc(100, game.bird_y, 15, 0, 2 * 3.14159)
    ctx.fill()

    # Draw pipes
    ctx.fillStyle = "green"
    for pipe in game.pipes:
        # Top pipe
        ctx.fillRect(pipe['x'], 0, game.pipe_width, pipe['top'])
        # Bottom pipe
        ctx.fillRect(pipe['x'], pipe['top'] + game.pipe_gap, game.pipe_width, canvas.height)

    # Draw score
    ctx.fillStyle = "white"
    ctx.font = "30px Arial"
    ctx.fillText(f"Score: {game.score}", 10, 50)

    # Draw game over
    if game.game_over:
        ctx.fillStyle = "red"
        ctx.font = "50px Arial"
        ctx.fillText("Game Over", 100, 300)

def game_loop(timestamp=None):
    game.update()
    draw()
    js.requestAnimationFrame(game_loop)

# Properly create a proxy for the keydown event handler and keep it alive
def on_keydown(event):
    if event.code == "Space" or event.code == "ArrowUp":
        game.flap()

keydown_proxy = create_proxy(on_keydown)
js.window.addEventListener("keydown", keydown_proxy)

# Start the game loop
js.requestAnimationFrame(game_loop)
